<#import "macros.ftl" as my>
<#assign modelJavaPackage = my.getJavaPackage() >
<#assign thisJavaPackage = modelJavaPackage + ".servlet" >
<#assign intrfJavaPackage = modelJavaPackage + ".intrf" >
<#assign callJavaPackage = modelJavaPackage + ".call" >
<#assign objectName = object.getName() >
<#assign className = objectName + "Servlet" > 

/**
 * This file is generated by the Amit
 * don't modify it manually
 */
package ${thisJavaPackage};

import java.io.InputStream;
import java.io.IOException;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.amit.api.amit.servlet.runtime.AmitServlet;
import com.amit.api.amit.servlet.runtime.ServletFunctionImp;
import com.amitapi.json.runtime.__JsonSerializable;
import com.amitapi.json.runtime.__JsonSerializableException;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;

/**
 * Service ${objectName} Servlet
 */
public class ${className} extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private AmitServlet servlet = new AmitServlet();

<#list object.getBaseInterfaceNames() as interfaceName >
	<#assign ainterfaceName = interfaceName?uncap_first >
	/**
	 * interface ${interfaceName}
	 */
	private ${intrfJavaPackage}.${interfaceName} __${ainterfaceName};
	
	@Override
    protected void doPost( HttpServletRequest req, HttpServletResponse resp ) throws IOException {
    	resp.setContentType("application/json");
    	resp.setStatus( servlet.execute( req.getRequestURI(), req.getInputStream(), resp.getOutputStream() ));
    	resp.getOutputStream().flush();
	}

	public void registerInterface( ${intrfJavaPackage}.${interfaceName} value ) {
		if( __${ainterfaceName} != null ) {
			throw new IllegalArgumentException( "interface ${interfaceName} is already registered" );
		}
		
		this.__${ainterfaceName} = value;
	
	<#assign interfaceObj = project.getType( interfaceName ) >
	<#list interfaceObj.getFunctions() as function >
		<#assign fname = function.getName() >
		<#assign ARfname = fname?cap_first + "Request"  >
		<#assign APfname = fname?cap_first + "Response"  >	
		<#assign returnType = function.getReturn().getTypeName() >
		
		/**
		 * ${fname}
		 */
		servlet.withFunction( 
			new ServletFunctionImp<${callJavaPackage}.Call${interfaceName}.${ARfname}>() {
				public String getPath() {
					return "/${objectName?lower_case}/${fname?lower_case}";
				}

				@Override
				protected ${callJavaPackage}.Call${interfaceName}.${ARfname} parse( InputStream in )
						throws IllegalArgumentException, JsonParseException,
						IOException {
					JsonParser parser = AmitServlet.parser( in );
					${callJavaPackage}.Call${interfaceName}.${ARfname} result = 
							${callJavaPackage}.Call${interfaceName}.${ARfname}.__deserialize(
								parser
							);
							
					parser.close();
					return result;
				}

				@Override
				protected __JsonSerializable exec( ${callJavaPackage}.Call${interfaceName}.${ARfname} request )
						throws __JsonSerializableException {
					${callJavaPackage}.Call${interfaceName}.${APfname} response = 
							new ${callJavaPackage}.Call${interfaceName}.${APfname}();
							
			<#if returnType == "void" >
					__${ainterfaceName}.${fname}(
			<#else>
					response.setReturnValue( __${ainterfaceName}.${fname}(
			</#if>
			<#list function.getArguments() as arg >
				<#assign aname = arg.getName() >
						request.get${aname?cap_first}()<#if arg_has_next>,</#if>
			</#list>							
			<#if returnType == "void" >
					);
			<#else>
					));
			</#if>
					
					return response;
				}
		});	
	</#list>
	}
	
</#list>
}