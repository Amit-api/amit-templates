<#import "macros.ftl" as my>
<#assign modelJavaPackage = my.getJavaPackage() >
<#assign thisJavaPackage = modelJavaPackage + ".exception" >
/**
 * This file is generated by the Amit
 * don't modify it manually
 */
package ${thisJavaPackage};

import java.util.Map; 
import java.util.List; 

/**
 * Exception thrown if the request didn't pass the server validation
 */
public class ValidationException extends ServerException {
	private static final long serialVersionUID = 1L;

	protected String code;
	protected String reason;
	
	public ValidationException() {
	}
	
	public void setCode( String code ) {
		this.code = code;
	}
	
	public String getCode() {
		return code;
	}

	public ValidationException withCode( String code ) {
		this.code = code;
		return this;
	}
	
	public void setReason( String reason ) {
		this.reason = reason;
	}
	
	public String getReason() {
		return reason;
	}
	
	public ValidationException withReason( String reason ) {
		this.reason = reason;
		return this;
	}
	
	@Override
    public String getMessage() {
        return String.format( "%s: %s", code, reason );
    }
	
	/**
	 * validate that value is not null 
	 */
	public static void notNull( String prefix, String name, Object value ) throws ValidationException {
		if( value == null ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.isnull", prefix, name ) )
				.withReason( String.format( "the '%s%s' value must be not null", prefix, name ) );
		}
	}
	
	/**
	 * validate that string is not empty
	 */
	public static void notEmpty( String prefix, String name, String value ) throws ValidationException {
		if( value != null && value.isEmpty() ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.empty", prefix, name ) )
				.withReason( String.format( "the '%s%s' value must be not empty", prefix, name ) );
		}
	}

	/**
	 * validate that list is not empty
	 */
	public static void notEmpty( String prefix, String name, List<?> value ) throws ValidationException {
		if( value != null && value.isEmpty() ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.empty", prefix, name ) )
				.withReason( String.format( "the '%s%s' list must be not empty", prefix, name ) );
		}
	}

	/**
	 * validate that map is not empty
	 */
	public static void notEmpty( String prefix, String name, Map<?,?> value ) throws ValidationException {
		if( value != null && value.isEmpty() ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.empty", prefix, name ) )
				.withReason( String.format( "the '%s%s' map must be not empty", prefix, name ) );
		}
	}
	
	/**
	 * validate that value length is not bigger than maxLength
	 */
	public static void notBigger( String prefix, String name, String value, int maxLength ) throws ValidationException {
		if( value != null && value.length() > maxLength ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.maxlength", prefix, name ) )
				.withReason( String.format( "the '%s%s' value length must be sammler than %s", prefix, name, maxLength ) );
		}
	}

	/**
	 * validate that value length is not smaller than maxLength
	 */
	public static void notSmaller( String prefix, String name, String value, int minLength ) throws ValidationException {
		if( value != null && value.length() < minLength ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.minlength", prefix, name ) )
				.withReason( String.format( "the '%s%s' value length must be sammler than %s", prefix, name, minLength ) );
		}
	}

	/**
	 * validate that int value is not bigger than max
	 */
	public static void notBigger( String prefix, String name, Integer value, int max ) throws ValidationException {
		if( value != null && value > max ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.max", prefix, name ) )
				.withReason( String.format( "the '%s%s' value must be sammler than %s", prefix, name, max ) );
		}
	}
	
	/**
	 * validate that int value is not smaller than min
	 */
	public static void notSmaller( String prefix, String name, Integer value, int min ) throws ValidationException {
		if( value != null && value < min ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.min", prefix, name ) )
				.withReason( String.format( "the '%s%s' value must be sammler than %s", prefix, name, min ) );
		}
	}
	
	/**
	 * validate that long value is not bigger than max
	 */
	public static void notBigger( String prefix, String name, Long value, long max ) throws ValidationException {
		if( value != null && value > max ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.max", prefix, name ) )
				.withReason( String.format( "the '%s%s' value must be sammler than %s", prefix, name, max ) );
		}
	}
	
	/**
	 * validate that int value is not smaller than min
	 */
	public static void notSmaller( String prefix, String name, Long value, long min ) throws ValidationException {
		if( value != null && value < min ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.min", prefix, name ) )
				.withReason( String.format( "the '%s%s' value must be sammler than %s", prefix, name, min ) );
		}
	}
	
	
	/**
	 * validate that list size is not bigger than max
	 */
	public static void notBigger( String prefix, String name, List<?> value, int max ) throws ValidationException {
		if( value != null && value.size() > max ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.max", prefix, name ) )
				.withReason( String.format( "the '%s%s' list size must be sammler than %s", prefix, name, max ) );
		}
	}
	
	/**
	 * validate that list size is not smaller than min
	 */
	public static void notSmaller( String prefix, String name, List<?> value, int min ) throws ValidationException {
		if( value != null && value.size() < min ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.min", prefix, name ) )
				.withReason( String.format( "the '%s%s' list size must be sammler than %s", prefix, name, min ) );
		}
	}
	
	/**
	 * validate that map size is not bigger than max
	 */
	public static void notBigger( String prefix, String name, Map<?,?> value, int max ) throws ValidationException {
		if( value != null && value.size() > max ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.max", prefix, name ) )
				.withReason( String.format( "the '%s%s' map size must be sammler than %s", prefix, name, max ) );
		}
	}
	
	/**
	 * validate that map size is not smaller than min
	 */
	public static void notSmaller( String prefix, String name, Map<?,?> value, int min ) throws ValidationException {
		if( value != null && value.size() < min ) {
			throw new ValidationException()
				.withCode( String.format("arg.%s%s.min", prefix, name ) )
				.withReason( String.format( "the '%s%s' map size must be sammler than %s", prefix, name, min ) );
		}
	}	
}