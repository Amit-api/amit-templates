<#import "macros.ftl" as my>
<#assign modelJavaPackage = my.getJavaPackage() >
<#assign thisJavaPackage = modelJavaPackage + ".json.exception" >
/**
 * This file is generated by the Amit
 * don't modify it manually
 */
package ${thisJavaPackage};

import java.util.Map;
import java.util.HashMap;

import ${modelJavaPackage}.u.Lib.JsonReader;
import ${modelJavaPackage}.u.Lib.JsonWriter;
import ${modelJavaPackage}.exception.AccessDeniedException;
import ${modelJavaPackage}.exception.AccessExpiredException;
import ${modelJavaPackage}.exception.InternalException;
import ${modelJavaPackage}.exception.ValidationException;


public class RuntimeExceptionSerializers {
	
	/**
	 * readers
	 */
	@SuppressWarnings("serial")
	public static final Map<String, JsonReader<? extends Exception>> READERS = new HashMap<String, JsonReader<? extends Exception>>() {{
		put( AccessDeniedExceptionSerializer.className, AccessDeniedExceptionSerializer.READER );
		put( AccessExpiredExceptionSerializer.className, AccessExpiredExceptionSerializer.READER );
		put( InternalExceptionSerializer.className, InternalExceptionSerializer.READER );
		put( ValidationExceptionSerializer.className, ValidationExceptionSerializer.READER );
	}};
	
	/**
	 * writers
	 */
	@SuppressWarnings("serial")
	public static final Map<Class<?>, JsonWriter> WRITERS = new HashMap<Class<?>, JsonWriter>() {{
		put( AccessDeniedException.class, AccessDeniedExceptionSerializer.WRITER );
		put( AccessExpiredException.class, AccessExpiredExceptionSerializer.WRITER );
		put( InternalException.class, InternalExceptionSerializer.WRITER );
		put( ValidationException.class, ValidationExceptionSerializer.WRITER );
	}};
}